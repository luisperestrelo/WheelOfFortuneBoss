using UnityEngine;

/// <summary>
/// Increases BaseDamageTakenMultiplier by +x% per stack, stacking indefinitely.
/// When a new stack is applied, it refreshes this buff's duration and increments stackCount.
/// When the buff expires, we remove all stacks at once.
/// </summary>
public class VulnerabilityBuff : BuffBase
{
    private Stats _targetStats;
    private bool isApplied = false;

    private int aggregatorId = -1;  
    private float multiplierStep;

    public VulnerabilityBuff(float multiplierStep, float duration)
    {
        BuffId = "VulnerabilityBuff";
        BuffType = BuffType.Debuff; 
        StackingMode = StackingMode.IndependentButRefreshesAll;
        Duration = duration;
        this.multiplierStep = multiplierStep;
        // No max stack => MaxStackCount = -1 by default
    }


    public override void OnApply(Stats targetStats)
    {
        _targetStats = targetStats;
        isApplied = true;

        aggregatorId = _targetStats.AddDamageTakenContribution(multiplierStep);
    }


    public override void OnUpdate(Stats targetStats, float deltaTime)
    {
    }


    public override void OnRemove(Stats targetStats)
    {
        if (isApplied)
        {
            if (aggregatorId >= 0)
            {
                _targetStats.RemoveDamageTakenContribution(aggregatorId);
                aggregatorId = -1;
            }
            Debug.Log($"[VulnerabilityBuff] OnRemove => removing stacks: {StackCount}.");
        }
        isApplied = false;
    }


    //not used
    public override void AddStack()
    {
        base.AddStack();  
        if (aggregatorId >= 0) {
           _targetStats.RemoveDamageTakenContribution(aggregatorId);
        }
        float newValue = Mathf.Pow(multiplierStep, StackCount);
        aggregatorId = _targetStats.AddDamageTakenContribution(newValue);

        Debug.Log($"[VulnerabilityBuff] AddStack => now {StackCount} stacks => damage taken up to x{Mathf.Pow(multiplierStep, StackCount)}.");
    }

    /// <summary>
    /// Helper method to multiply or revert BaseDamageTakenMultiplier.
    /// </summary>
    private void MultiplyDamageTaken(float factor)
    {
        if (_targetStats != null)
        {
            _targetStats.MultiplyBaseDamageTakenMultiplier(factor);
        }
    }
} 